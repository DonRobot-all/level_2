# things = {
#     'зажигалка': 20, 'компас': 100, 'фрукты': 500, 'рубашка': 300,
#     'термос': 1000, 'аптечка': 200, 'куртка': 600, 'бинокль': 400, 'удочка': 1200,
#     'салфетки': 40, 'бутерброды': 820, 'палатка': 5500, 'спальный мешок': 2250, 
#     'жвачка': 10
#     }

# def k(element):
#     return element[1]

# things = dict(sorted(things.items(), key=k))
# print(things)
# things = sorted(things.values())
# print(things)
# new_things = {
#     'аптечка': 400,
#     'вода':300
# }

# things.update(new_things)
# print(things)

# def example(number, number_2):
#     return number + number_2


# assert example(2,4) == 6, example(2,4)
# assert example(0,4) == 4, example(0,4)
# assert example(2,-4) == -2, example(2,-4)
# assert example(-2,-4) == -6, example(-2,-4)

# things = {
#     'зажигалка': 20, 'компас': 100, 'фрукты': 500, 'рубашка': 300,
#     'термос': 1000, 'аптечка': 200, 'куртка': 600, 'бинокль': 400, 'удочка': 1200,
#     'салфетки': 40, 'бутерброды': 820, 'палатка': 5500, 'спальный мешок': 2250, 
#     'жвачка': 10
#     }

# print(things.get('овощи'))
# print(things.setdefault('овощи', 0))
# print(things)

# things['овощи'] = 500
# things.setdefault()
# print(things.popitem())
# things.pop('фрукты')
# print(things)
# """
# Задача 4
# Дана строка в виде случайной последовательности чисел от 0 до 9.
# Требуется создать словарь, который в качестве ключей будет принимать данные числа (т. е. ключи будут типом int), 
# а в качестве значений – количество этих чисел в имеющейся последовательности. 
# """
# name = set(('andrei_serov', 'alexander_pushkin', 'elena_belova', 'kirill_stepanov'))
# things = dict.fromkeys(name, 0)
# print(things)


# s_1 = {1, 2, 3}
# s_2 = {3, 4, 5}

# union_set = s_1 | s_2
# # union_set = s_1.union(s_2)
# print(union_set)

# intersection_set = s_1 & s_2
# # intersection_set = s_1.intersection(s_2)
# print(intersection_set)


# differenve_set = s_1 - s_2
# # differenve_set = s_1.difference(s_2)
# print(differenve_set)


# symmetric_difference = s_1 ^ s_2
# # symmetric_difference = s_1.symmetric_difference(s_2)
# print(symmetric_difference)


# s_1 = {1, 2, 3}
# s_2 = {3, 1, 2}
# print(s_1 == s_2)

# s_1 = {1, 2, 3}
# s_2 = {1, 2, 3, 4}
# print(s_1 <= s_2)

# s_1 = {1, 2, 3}
# s_2 = {1, 2, 3, 4}
# print(s_1 >= s_2)

# s = set(['Кирилл', 'Георгий', 'Денис'])
# s.add('Илья')
# print(s.pop())
# print(list(s))
# s.remove('Валерий')
# # set.pop()
# # set.clear()


# Символическая выжимка

# Во многих промышленных задачах требуется понимать, из каких символов состоят данные. Напишите программу, чтобы 
# по введённой строке она определяла, из каких символов та состоит.
# Формат ввода

# Вводится одна строка.
# Формат вывода

# Требуется вывести все символы этой строки без повторений.
# Порядок вывода не имеет значения.

# Ввод
# змееед
# Вывод
# здме

# Ввод
# велосипед
# Вывод
# исолвдеп



# Символическая разница

# А ещё в промышленных задачах часто требуется находить общее среди данных, полученных из разных источников. Напишите программу, 
# которая по двум строкам определяет их общие символы.
# Формат ввода

# Вводится две строки.
# Формат вывода

# Требуется вывести все символы этой строки без повторений.
# Порядок вывода не имеет значения.
# Ввод
# змееед
# велосипед

# Вывод
# ед




# Формат ввода
# В первой строке записано натуральное число N — количество выделенных придорожных местностей.
# В каждой из N последующих строк записано описание придорожной местности.
# Формат вывода
# Вывести все найденные объекты в придорожных местностях.

# Ввод
# 3
# березка елочка зайка волк березка
# сосна зайка сосна елочка зайка медведь
# сосна сосна сосна белочка сосна белочка

# Вывод
# сосна
# березка
# волк
# елочка
# медведь
# белочка
# зайка


# Кашееды

# Каждый воспитанник детского сада любит либо манную, либо овсяную, либо обе каши.
# Давайте создадим программу, которая позволит воспитателю быстро выяснить, сколько детей любят обе каши.
# Формат ввода

# В первых двух строках указывается количество детей, любящих манную и овсяную каши (NN и MM).
# Затем идут NN строк — фамилии детей, которые любят манную кашу, и MM строк с фамилиями детей, любящих овсяную кашу.
# Гарантируется, что в группе нет однофамильцев.
# Формат вывода

# Количество учеников, которые любят обе каши.
# Если таких не окажется, в строке вывода нужно написать «Таких нет».
# Ввод
# 3
# 2
# Васильев
# Петров
# Васечкин
# Иванов
# Михайлов

# Вывод
# Таких нет


# Ввод
# 3
# 3
# Иванов
# Петров
# Васечкин
# Иванов
# Петров
# Васечкин

# Вывод
# 3


# Кашееды — 2

# Изменим задачу и напишем программу, которая поможет быстро выяснить, сколько детей любят только одну кашу.
# Формат ввода

# В первых двух строках указывается количество детей, любящих манную и овсяную каши (N и M).
# Затем идут N+M строк — перемешанные фамилии детей.
# Гарантируется, что в группе нет однофамильцев.
# Формат вывода

# Количество учеников, которые любят только одну кашу.
# Если таких не окажется, в строке вывода нужно написать «Таких нет».

# Ввод
# 3
# 2
# Васильев
# Петров
# Васечкин
# Иванов
# Михайлов

# Вывод
# 5
